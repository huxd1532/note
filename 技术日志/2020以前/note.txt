1、mo转po
msgunfmt xxx.po -o xxx.mo
生产mo（sudo包为例）：
make compile-po 

2、安装补丁和卸载补丁
安装补丁包：patch  -p(n)  < [补丁包路径] patch_name
卸载补丁包：patch  -p(n)  -R  < [补丁包路径] patch_name

3、qdbus调试
qdbus --literal com.deepin.SessionManager /com/deepin/SessionManager com.deepin.SessionManager.Shutdown
如果在远程终端上使用需要导入以下两个环境变量：
export DISPLAY=:0
export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus (和被远程连接的机器一致)

4、sh -c
https://blog.csdn.net/bobchill/article/details/84647575

5、修改system 启动服务参数
vim /lib/systemd/system/polkit.service/xxx
sudo systemctl daemon-reload
6、重定向进程打印
vim /lib/systemd/system/polkit.service 
/bin/sh -c '/usr/lib/policykit-1/polkitd > /tmp/polkit.log 2>&1'

7、利用backtrace和backtrace_symbols打印函数调用关系
https://www.cnblogs.com/klcf0220/p/5646821.html
#include <execinfo.h>
#define SYSBOLE_LEN 32
void print_stacktrace()
{
    int size = SYSBOLE_LEN;
    void * array[SYSBOLE_LEN];
    int stack_num = backtrace(array, size);
    char ** stacktrace = backtrace_symbols(array, stack_num);
    printf("------printf stack start------\n");
    for (int i = 0; i < stack_num; ++i)
    {
        printf("%s\n", stacktrace[i]);
    }
    printf("------printf stack end------\n");
    free(stacktrace);
}

5、addr2line


6、dbus调试
dbus-monitor "type=method_call" > /tmp/session.log 2>&1
sudo dbus-monitor --system "type=method_call" > /tmp/system.log 2>&1


7、tty打印
#include<stdio.h>
#include <termios.h>
#include <stdarg.h>
FILE *open_tty(void){
    char *tty_name;
    FILE *tty_file;
    tty_name = ctermid(NULL);
    tty_file = fopen(tty_name, "r+");
    return tty_file;
}

void close_tty(FILE *tty_file){
    if(NULL != tty_file)
        fclose(tty_file);
}

void tty_printf(char * format, ...)
{
    va_list args;
    FILE *tty_file;
    tty_file=open_tty();
    if (NULL == tty_file)
        return;
    va_start(args,format);
    vfprintf(tty_file, format, args);
    va_end(args);
    fflush(tty_file);
    close_tty(tty_file);
}

void main(void)
{
    tty_printf("SADSFSF:%d, %s\n", 123, "abc");
}

或者：
#include<stdio.h>
#include <stdarg.h>
FILE *open_tty(void){
    const char *tty_name = "/tmp/polkit1.log";
    FILE *tty_file = fopen(tty_name, "at+");
    return tty_file;
}

void close_tty(FILE *tty_file){
    if(NULL != tty_file)
        fclose(tty_file);
}

void tty_printf(char * format, ...)
{
    va_list args;
    FILE *tty_file;
    tty_file=open_tty();
    if (NULL == tty_file)
        return;
    va_start(args,format);
    vfprintf(tty_file, format, args);
    va_end(args);
    fflush(tty_file);
    close_tty(tty_file);
}


8、syslog
#include<stdio.h>
#include<stdlib.h>
#include <syslog.h>

int main()
{
    openlog("info",LOG_PID,LOG_LOCAL5);
    syslog(LOG_INFO, "hello %s","info");
    syslog(LOG_NOTICE, "hello %s","notice");
    syslog(LOG_DEBUG, "hello %s","debug");
    closelog();
    return 0;
}

openlog ("polkit-agent-helper-1", LOG_CONS | LOG_PID, LOG_AUTHPRIV);
